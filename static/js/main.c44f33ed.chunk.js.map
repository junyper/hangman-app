{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","correct","setCorrect","incorrect","setIncorrect","game","setGame","loadGameData","a","undefined","fetch","response","json","data","console","error","useEffect","word","definition","alphabet","split","characters","map","char","toUpperCase","letters","includes","length","join","handleLetterClick","e","currentTarget","value","classNameForLetter","letter","className","type","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA8GeA,MAjGf,WAAgB,IAAD,EACiBC,mBAAmB,IADpC,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAmB,IAFxC,mBAENG,EAFM,KAEKC,EAFL,OAGWJ,qBAHX,mBAGNK,EAHM,KAGAC,EAHA,KAKPC,EAAY,uCAAG,8BAAAC,EAAA,6DACnBF,OAAQG,GADW,kBAGMC,MAfb,4CAYO,cAGXC,EAHW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBP,EAAQO,EAAK,IALI,kDAOjBC,QAAQC,MAAR,MAPiB,0DAAH,qDAelB,GAJAC,qBAAU,WACRT,MACC,KAEEF,EAAM,OAAO,uDApBL,IAsBLY,EAAqBZ,EAArBY,KAAMC,EAAeb,EAAfa,WACRC,EA/BS,6BA+BWC,MAAM,IAC1BC,EAAaJ,EAAKG,MAAM,IAAIE,KAAI,SAAAC,GAAI,OAAIA,EAAKC,iBAC7CC,EAAUJ,EAAWC,KAAI,SAAAC,GAC7B,OAAItB,EAAQyB,SAASH,IAASpB,EAAUwB,QAnCtB,EAoCTJ,EAEA,OAERK,KAAK,KAEFC,EAAoB,SAACC,GACzB,IAAMP,EAAOO,EAAEC,cAAcC,MA3CX,IA6Cd7B,EAAUwB,SAEHN,EAAWK,SAASH,GAC7BrB,EAAW,GAAD,mBAAKD,GAAL,CAAcsB,KAExBnB,EAAa,GAAD,mBAAKD,GAAL,CAAgBoB,OAI1BU,EAAqB,SAACC,GAC1B,OAAIjC,EAAQyB,SAASQ,GACZ,UACE/B,EAAUuB,SAASQ,GACrB,YAEA,aAcX,OACE,gCACE,6CACehB,KAEbO,EAAQC,SAAS,MAAQvB,EAAUwB,OA/ErB,EAgFd,8DAAgC,4BAhFlB,EAgFsCxB,EAAUwB,SAA9D,eACA,gDAEF,mBAAGQ,UAAU,OAAb,SACGV,IAEH,4BAEEN,EAASG,KAAI,SAAAY,GAAM,OACjB,uBACEE,KAAK,SAELC,QAASR,EACTG,MAAOE,EACPI,SAAUrC,EAAQyB,SAASQ,IAAW/B,EAAUuB,SAASQ,IA9F/C,IA8F0D/B,EAAUwB,OAC9EQ,UAAWF,EAAmBC,IAJzBA,QASX,wBAAQE,KAAK,SAASC,QApCN,WAClBnC,EAAW,YAAImB,KAmCb,2BACA,wBAAQe,KAAK,SAASC,QAjCR,WAChBjC,EAAa,IACbF,EAAW,IACXK,KA8BE,gCC3FSgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c44f33ed.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nconst MAX_INCORRECT = 5;\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst API_URL = 'https://random-words-api.vercel.app/word';\ninterface Game {\n  word: string;\n  definition: string;\n  pronounciation?: string;\n}\n\nfunction App() {\n  const [correct, setCorrect] = useState<string[]>([]);\n  const [incorrect, setIncorrect] = useState<string[]>([]);\n  const [game, setGame] = useState<Game | undefined>();\n\n  const loadGameData = async () => {\n    setGame(undefined)\n    try {\n      const response = await fetch(API_URL);\n      const data = await response.json();\n      setGame(data[0]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    loadGameData();\n  }, []);\n\n  if (!game) return <div>Loading game data...</div>\n\n  const { word, definition } = game;\n  const alphabet = ALPHABET.split('');\n  const characters = word.split('').map(char => char.toUpperCase());\n  const letters = characters.map(char => {\n    if (correct.includes(char) || incorrect.length >= MAX_INCORRECT) {\n      return char;\n    } else {\n      return '_';\n    }\n  }).join(' ');\n\n  const handleLetterClick = (e: React.MouseEvent<HTMLInputElement>) => {\n    const char = e.currentTarget.value;\n\n    if (incorrect.length === MAX_INCORRECT) {\n      return;\n    } else if (characters.includes(char)) {\n      setCorrect([...correct, char])\n    } else {\n      setIncorrect([...incorrect, char])\n    }\n  };\n\n  const classNameForLetter = (letter: string) => {\n    if (correct.includes(letter)) {\n      return 'correct';\n    } else if (incorrect.includes(letter)) {\n      return 'incorrect';\n    } else {\n      return 'available';\n    }\n  };\n\n  const showTheWord = () => {\n    setCorrect([...characters]);\n  };\n\n  const resetGame = () => {\n    setIncorrect([]);\n    setCorrect([]);\n    loadGameData();\n  };\n\n  return (\n    <div>\n      <p>\n        Definition: {definition}\n      </p>\n      { letters.includes('_') && incorrect.length < MAX_INCORRECT?\n        <span>Can you guess the word in <b>{MAX_INCORRECT - incorrect.length}</b> guesses?</span> :\n        <span>The word is:</span>\n      }\n      <p className=\"Word\">\n        {letters}\n      </p>\n      <p>\n      {\n        alphabet.map(letter =>\n          <input\n            type=\"button\"\n            key={letter}\n            onClick={handleLetterClick}\n            value={letter}\n            disabled={correct.includes(letter) || incorrect.includes(letter) || incorrect.length === MAX_INCORRECT}\n            className={classNameForLetter(letter)}\n          />\n        )\n      }\n      </p>\n      <button type=\"button\" onClick={showTheWord}>Show the word</button>\n      <button type=\"button\" onClick={resetGame}>Try a new word</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Start the mocking conditionally.\n// if (process.env.NODE_ENV === 'development') {\n//   const { worker } = require('./mocks/browser')\n//   worker.start()\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}