{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ALPHABET","split","App","useState","correct","setCorrect","incorrect","setIncorrect","game","setGame","answer","useMemo","word","map","char","toUpperCase","guessLetter","useCallback","letter","length","includes","loadGameData","undefined","fetch","then","response","json","data","catch","error","console","resetGame","useEffect","handleKeyUp","e","key","window","addEventListener","removeEventListener","letters","join","handleLetterClick","currentTarget","value","gameIsLost","gameIsInProgress","definition","style","color","className","type","onClick","disabled","classNames","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAMMA,EAAW,6BAA6BC,MAAM,IA+GrCC,MAtGf,WAAgB,IAAD,EACiBC,mBAAmB,IADpC,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAmB,IAFxC,mBAENG,EAFM,KAEKC,EAFL,OAGWJ,qBAHX,mBAGNK,EAHM,KAGAC,EAHA,KAKPC,EAASC,mBAAQ,kBAAMH,EAAOA,EAAKI,KAAKX,MAAM,IAAIY,KAAI,SAAAC,GAAI,OAAIA,EAAKC,iBAAiB,KAAI,CAACP,IAEzFQ,EAAcC,uBAAY,SAACC,GAjBb,IAkBdZ,EAAUa,QAA6BnB,EAASoB,SAASF,KAElDR,EAAOU,SAASF,KAAYd,EAAQgB,SAASF,GACtDb,EAAW,GAAD,mBAAKD,GAAL,CAAcc,KACdZ,EAAUc,SAASF,IAC7BX,EAAa,GAAD,mBAAKD,GAAL,CAAgBY,QAE7B,CAACb,EAAYE,EAAcD,EAAWF,EAASM,IAE5CW,EAAeJ,uBAAY,WAC/BR,OAAQa,GACRC,MA3BY,4CA4BTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIlB,EAAQkB,EAAK,OAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAC/B,CAACpB,IAEEsB,EAAYd,uBAAY,WAC5BV,EAAa,IACbF,EAAW,IACXgB,MACC,CAACd,EAAcF,EAAYgB,IAE9BW,qBAAU,WAAQX,MAAmB,CAACA,IAEtCW,qBAAU,WACR,IAAMC,EAAc,SAACC,GACL,WAAVA,EAAEC,KAAkBJ,IACxBf,EAAYkB,EAAEC,IAAIpB,gBAGpB,OADAqB,OAAOC,iBAAiB,QAASJ,GAC1B,kBAAMG,OAAOE,oBAAoB,QAASL,MAChD,CAACjB,EAAae,IAEjB,IAAMQ,EAAU7B,EAAOG,KAAI,SAAAC,GACzB,OAAIV,EAAQgB,SAASN,IAASR,EAAUa,QArDtB,EAsDTL,EAEA,OAER0B,KAAK,KAEFC,EAAoB,SAACP,GACzBlB,EAAYkB,EAAEQ,cAAcC,QAOxBC,EAAatC,EAAUa,QApET,EAqEd0B,EAAmBN,EAAQnB,SAAS,OAASwB,EAEnD,OAAQpC,EACN,gCACE,6CACeA,EAAKsC,cAElBD,EACA,2DACA,iCACID,EACA,mBAAGG,MAAO,CAAEC,MAAO,OAAnB,oBACA,mBAAGD,MAAO,CAAEC,MAAO,SAAnB,mBAHJ,kBAQF,mBAAGC,UAAU,OAAb,SACGV,IAEH,4BAEEvC,EAASa,KAAI,SAAAK,GAAM,OACjB,uBACEgC,KAAK,SAELC,QAASV,EACTE,MAAOzB,EACPkC,SAAUhD,EAAQgB,SAASF,IAAWZ,EAAUc,SAASF,IAAW0B,EACpEK,UAAWI,IAAW,CACpB,QAAWjD,EAAQgB,SAASF,GAC5B,UAAaZ,EAAUc,SAASF,MAN7BA,QAYX,wBAAQgC,KAAK,SAASC,QA1CN,WAClB9C,EAAW,YAAIK,KAyCb,2BACA,wBAAQwC,KAAK,SAASC,QAASpB,EAA/B,+BAEF,wDCpGWuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f8e9eab1.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport './App.css';\n\nconst MAX_INCORRECT = 5;\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\nconst API_URL = 'https://random-words-api.vercel.app/word';\n\ninterface Game {\n  word: string;\n  definition: string;\n  pronounciation?: string;\n}\n\nfunction App() {\n  const [correct, setCorrect] = useState<string[]>([]);\n  const [incorrect, setIncorrect] = useState<string[]>([]);\n  const [game, setGame] = useState<Game | undefined>();\n\n  const answer = useMemo(() => game ? game.word.split('').map(char => char.toUpperCase()) : [], [game]);\n\n  const guessLetter = useCallback((letter: string) => {\n    if (incorrect.length === MAX_INCORRECT || !ALPHABET.includes(letter)) {\n      return;\n    } else if (answer.includes(letter) && !correct.includes(letter)) {\n      setCorrect([...correct, letter])\n    } else if (!incorrect.includes(letter)) {\n      setIncorrect([...incorrect, letter])\n    }\n  }, [setCorrect, setIncorrect, incorrect, correct, answer]);\n\n  const loadGameData = useCallback(() => {\n    setGame(undefined);\n    fetch(API_URL)\n      .then(response => response.json())\n      .then(data => setGame(data[0]))\n      .catch(error => console.error(error));\n  }, [setGame]);\n\n  const resetGame = useCallback(() => {\n    setIncorrect([]);\n    setCorrect([]);\n    loadGameData();\n  }, [setIncorrect, setCorrect, loadGameData]);\n\n  useEffect(() => { loadGameData(); }, [loadGameData]);\n\n  useEffect(() => {\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') resetGame();\n      guessLetter(e.key.toUpperCase());\n    };\n    window.addEventListener('keyup', handleKeyUp);\n    return () => window.removeEventListener('keyup', handleKeyUp);\n  }, [guessLetter, resetGame]);\n\n  const letters = answer.map(char => {\n    if (correct.includes(char) || incorrect.length >= MAX_INCORRECT) {\n      return char;\n    } else {\n      return '_';\n    }\n  }).join(' ');\n\n  const handleLetterClick = (e: React.MouseEvent<HTMLInputElement>) => {\n    guessLetter(e.currentTarget.value);\n  };\n\n  const showTheWord = () => {\n    setCorrect([...answer]);\n  };\n\n  const gameIsLost = incorrect.length >= MAX_INCORRECT;\n  const gameIsInProgress = letters.includes('_') && !gameIsLost;\n\n  return (game ?\n    <div>\n      <p>\n        Definition: {game.definition}\n      </p>\n      { gameIsInProgress ?\n        <span>Can you guess the word?</span> :\n        <span>\n          { gameIsLost ?\n            <b style={{ color: 'red' }}>Oops! </b> :\n            <b style={{ color: 'green' }}>Yay! </b>\n          }\n          The word is:\n        </span>\n      }\n      <p className=\"Word\">\n        {letters}\n      </p>\n      <p>\n      {\n        ALPHABET.map(letter =>\n          <input\n            type=\"button\"\n            key={letter}\n            onClick={handleLetterClick}\n            value={letter}\n            disabled={correct.includes(letter) || incorrect.includes(letter) || gameIsLost}\n            className={classNames({\n              'correct': correct.includes(letter),\n              'incorrect': incorrect.includes(letter)\n            })}\n          />\n        )\n      }\n      </p>\n      <button type=\"button\" onClick={showTheWord}>Show the word</button>\n      <button type=\"button\" onClick={resetGame}>Try a new word</button>\n    </div>\n  : <div>Loading game data...</div>);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Start the mocking conditionally.\n// if (process.env.NODE_ENV === 'development') {\n//   const { worker } = require('./mocks/browser')\n//   worker.start()\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}